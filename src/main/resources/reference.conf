akka {
  jvm-exit-on-fatal-error = false
  default-dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-factor = 32.0
      parallelism-min = 16
      parallelism-max = 256
      task-peeking-mode = "FIFO"
    }
    throughput = 20
  }
  http {
    server {
      server-header = Otoroshi
      max-connections = 1024
      remote-address-header = on
      pipelining-limit = 32
      backlog = 100
        socket-options {
        so-receive-buffer-size = undefined
        so-send-buffer-size = undefined
        so-reuse-address = undefined
        so-traffic-class = undefined
        tcp-keep-alive = true
        tcp-oob-inline = undefined
        tcp-no-delay = undefined
      }
    }
    client {
      user-agent-header = Otoroshi
      socket-options {
        so-receive-buffer-size = undefined
        so-send-buffer-size = undefined
        so-reuse-address = undefined
        so-traffic-class = undefined
        tcp-keep-alive = true
        tcp-oob-inline = undefined
        tcp-no-delay = undefined
      }
    }
    host-connection-pool {
      max-connections = 16
      max-open-requests = 32
      pipelining-limit = 16
      client {
        user-agent-header = Otoroshi
        socket-options {
          so-receive-buffer-size = undefined
          so-send-buffer-size = undefined
          so-reuse-address = undefined
          so-traffic-class = undefined
          tcp-keep-alive = true
          tcp-oob-inline = undefined
          tcp-no-delay = undefined
        }
      }
    }
    parsing {
      max-uri-length             = 4k
      max-method-length          = 16
      max-response-reason-length = 64
      max-header-name-length     = 128
      max-header-value-length    = 16k
      max-header-count           = 128
      max-chunk-ext-length       = 256
      max-chunk-size             = 1m
    }
  }
}

app {
  storage = "inmemory"
  importFrom = "./src/main/resources/state.json"
  env = "prod"
  redirectToDev = false
  domain = "foo.bar"
  commitId = "HEAD"
  rootScheme = "http"
  middleFingers = true
  snowflake {
    seed = 0
  }
  events {
    maxSize = 1000
  }
  backoffice {
    subdomain = "otoroshi"
    session {
      exp = 86400000
    }
  }
  privateapps {
    subdomain = "privateapps"
    session {
      exp = 86400000
    }
  }
  adminapi {
    targetSubdomain = "otoroshi-admin-internal-api"
    exposedDubdomain = "otoroshi-api"
    defaultValues {
      backOfficeGroupId = "admin-api-group"
      backOfficeApiKeyClientId = "admin-api-apikey-id"
      backOfficeApiKeyClientSecret = "admin-api-apikey-secret"
      backOfficeServiceId = "admin-api-service"
    }
  }
  claim {
    sharedKey = "secret"
  }
  webhooks {
    size = 100
  }
  leveldb {
    windowSize = 99
    path = "./leveldb"
  }
}

otoroshi {
  headers {
    trace.label = "Otoroshi-Viz-From-Label"
    trace.from = "Otoroshi-Viz-From"
    trace.parent = "Otoroshi-Parent-Request"
    request.adminprofile = "Otoroshi-Admin-Profile"
    request.clientid = "Otoroshi-Client-Id"
    request.clientsecret = "Otoroshi-Client-Secret"
    request.id = "Otoroshi-Request-Id"
    response.proxyhost = "Otoroshi-Proxied-Host"
    response.error = "Otoroshi-Error"
    response.errormsg = "Otoroshi-Error-Msg"
    response.proxylatency = "Otoroshi-Proxy-Latency"
    response.upstreamlatency = "Otoroshi-Upstream-Latency"
    response.dailyquota = "Otoroshi-Daily-Calls-Remaining"
    response.monthlyquota = "Otoroshi-Monthly-Calls-Remaining"
    comm.state = "Otoroshi-State"
    comm.stateresp = "Otoroshi-State-Resp"
    comm.claim = "Otoroshi-Claim"
    healthcheck.test = "Otoroshi-Health-Check-Logic-Test"
    healthcheck.testresult = "Otoroshi-Health-Check-Logic-Test-Result"
    jwt.issuer = "Otoroshi"
    canary.tracker = "Otoroshi-Canary-Id"
  }
}

play.http {
  session {
    secure = false
    httpOnly = true
    maxAge = 2592000000
    domain = ".foo.bar"
    cookieName = "otoroshi-session"
  }
}

play.crypto.secret = "secret"